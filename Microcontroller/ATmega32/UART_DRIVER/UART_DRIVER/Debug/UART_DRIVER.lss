
UART_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000015c  000001d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000071b  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063d  00000000  00000000  000009a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e5  00000000  00000000  00000fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  000012cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000373  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001fe  00000000  00000000  00001707  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001905  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a5 00 	call	0x14a	; 0x14a <main>
  8a:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <uart_init>:
unsigned char receiver , transmitter;

// UART Intilization code
void uart_init()
{
	UBRRL = 0x67; //Baud rate is 9600bps and frequency is 16MHz
  92:	87 e6       	ldi	r24, 0x67	; 103
  94:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<TXEN)|(1<<RXEN)|(1<<RXCIE); //transmitter,receiver,receiver interrupt and UDR interrupt enable
  96:	88 e9       	ldi	r24, 0x98	; 152
  98:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
  9a:	86 e8       	ldi	r24, 0x86	; 134
  9c:	80 bd       	out	0x20, r24	; 32
	sei();
  9e:	78 94       	sei
  a0:	08 95       	ret

000000a2 <uart_transmitter>:
}

// UART Transmitter
unsigned char uart_transmitter(unsigned char data )
{
	UDR = data;
  a2:	8c b9       	out	0x0c, r24	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	83 ed       	ldi	r24, 0xD3	; 211
  a8:	90 e3       	ldi	r25, 0x30	; 48
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <uart_transmitter+0x8>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <uart_transmitter+0x12>
  b4:	00 00       	nop
	_delay_ms(1000);
	UCSRA = (1<<UDRE);
  b6:	80 e2       	ldi	r24, 0x20	; 32
  b8:	8b b9       	out	0x0b, r24	; 11
}
  ba:	08 95       	ret

000000bc <uart_print>:

void uart_print(unsigned char ch[100])
{
  bc:	ef 92       	push	r14
  be:	ff 92       	push	r15
  c0:	0f 93       	push	r16
  c2:	1f 93       	push	r17
  c4:	cf 93       	push	r28
  c6:	7c 01       	movw	r14, r24
	for(unsigned char i=0;i<100;i++)
  c8:	c0 e0       	ldi	r28, 0x00	; 0
  ca:	11 c0       	rjmp	.+34     	; 0xee <uart_print+0x32>
	{
		uart_transmitter(ch[i]);
  cc:	87 01       	movw	r16, r14
  ce:	0c 0f       	add	r16, r28
  d0:	11 1d       	adc	r17, r1
  d2:	f8 01       	movw	r30, r16
  d4:	80 81       	ld	r24, Z
  d6:	0e 94 51 00 	call	0xa2	; 0xa2 <uart_transmitter>
		if(ch[i] == 0)
  da:	f8 01       	movw	r30, r16
  dc:	80 81       	ld	r24, Z
  de:	81 11       	cpse	r24, r1
  e0:	05 c0       	rjmp	.+10     	; 0xec <uart_print+0x30>
		{
			ch[100] = '\0';
  e2:	f7 01       	movw	r30, r14
  e4:	ec 59       	subi	r30, 0x9C	; 156
  e6:	ff 4f       	sbci	r31, 0xFF	; 255
  e8:	10 82       	st	Z, r1
			break;
  ea:	03 c0       	rjmp	.+6      	; 0xf2 <uart_print+0x36>
	UCSRA = (1<<UDRE);
}

void uart_print(unsigned char ch[100])
{
	for(unsigned char i=0;i<100;i++)
  ec:	cf 5f       	subi	r28, 0xFF	; 255
  ee:	c4 36       	cpi	r28, 0x64	; 100
  f0:	68 f3       	brcs	.-38     	; 0xcc <uart_print+0x10>
			ch[100] = '\0';
			break;
		}
		
	}
}
  f2:	cf 91       	pop	r28
  f4:	1f 91       	pop	r17
  f6:	0f 91       	pop	r16
  f8:	ff 90       	pop	r15
  fa:	ef 90       	pop	r14
  fc:	08 95       	ret

000000fe <__vector_13>:
}


// UART receiver interrupt
ISR (USART_RXC_vect)
{
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	2f 93       	push	r18
 10a:	3f 93       	push	r19
 10c:	4f 93       	push	r20
 10e:	5f 93       	push	r21
 110:	6f 93       	push	r22
 112:	7f 93       	push	r23
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
 118:	af 93       	push	r26
 11a:	bf 93       	push	r27
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
	unsigned char data;
	data = UDR;
 120:	8c b1       	in	r24, 0x0c	; 12
	uart_print(data);
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 5e 00 	call	0xbc	; 0xbc <uart_print>
	
	
}
 128:	ff 91       	pop	r31
 12a:	ef 91       	pop	r30
 12c:	bf 91       	pop	r27
 12e:	af 91       	pop	r26
 130:	9f 91       	pop	r25
 132:	8f 91       	pop	r24
 134:	7f 91       	pop	r23
 136:	6f 91       	pop	r22
 138:	5f 91       	pop	r21
 13a:	4f 91       	pop	r20
 13c:	3f 91       	pop	r19
 13e:	2f 91       	pop	r18
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <main>:
}

int main(void)
{
   unsigned char data;
   uart_init();
 14a:	0e 94 49 00 	call	0x92	; 0x92 <uart_init>
   uart_print("or kya haal hai");
 14e:	80 e6       	ldi	r24, 0x60	; 96
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 5e 00 	call	0xbc	; 0xbc <uart_print>
 156:	ff cf       	rjmp	.-2      	; 0x156 <main+0xc>

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
