
002_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009e8  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000b6c  08000b6c  00010b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b78  08000b78  00010b80  2**0
                  CONTENTS
  4 .ARM          00000000  08000b78  08000b78  00010b80  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b78  08000b80  00010b80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b78  08000b78  00010b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b7c  08000b7c  00010b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000b80  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000b80  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010b80  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000120f  00000000  00000000  00010ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000406  00000000  00000000  00011db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000140  00000000  00000000  000121c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000108  00000000  00000000  00012300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000021ea  00000000  00000000  00012408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001a0c  00000000  00000000  000145f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008ff5  00000000  00000000  00015ffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001eff3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000470  00000000  00000000  0001f044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000000 	.word	0x20000000
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08000b54 	.word	0x08000b54

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000004 	.word	0x20000004
 80001c0:	08000b54 	.word	0x08000b54

080001c4 <strlen>:
 80001c4:	4603      	mov	r3, r0
 80001c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ca:	2a00      	cmp	r2, #0
 80001cc:	d1fb      	bne.n	80001c6 <strlen+0x2>
 80001ce:	1a18      	subs	r0, r3, r0
 80001d0:	3801      	subs	r0, #1
 80001d2:	4770      	bx	lr

080001d4 <GPIO_PeriClkCntrl>:
 * @return             - none
 *
 * @note               - none
 */
void GPIO_PeriClkCntrl(GPIO_RegDef_t *pGPIOx , uint8_t EnorDi)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	460b      	mov	r3, r1
 80001de:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 80001e0:	78fb      	ldrb	r3, [r7, #3]
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	d141      	bne.n	800026a <GPIO_PeriClkCntrl+0x96>
	{
		if (pGPIOx == GPIOA) GPIOA_PCLK_EN();
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4a43      	ldr	r2, [pc, #268]	; (80002f8 <GPIO_PeriClkCntrl+0x124>)
 80001ea:	4293      	cmp	r3, r2
 80001ec:	d106      	bne.n	80001fc <GPIO_PeriClkCntrl+0x28>
 80001ee:	4b43      	ldr	r3, [pc, #268]	; (80002fc <GPIO_PeriClkCntrl+0x128>)
 80001f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f2:	4a42      	ldr	r2, [pc, #264]	; (80002fc <GPIO_PeriClkCntrl+0x128>)
 80001f4:	f043 0301 	orr.w	r3, r3, #1
 80001f8:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOD) GPIOD_PCLK_DI();
		else if (pGPIOx == GPIOE) GPIOE_PCLK_DI();
		else if (pGPIOx == GPIOH) GPIOH_PCLK_DI();
		else {}
	}
}
 80001fa:	e077      	b.n	80002ec <GPIO_PeriClkCntrl+0x118>
		else if (pGPIOx == GPIOB) GPIOB_PCLK_EN();
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4a40      	ldr	r2, [pc, #256]	; (8000300 <GPIO_PeriClkCntrl+0x12c>)
 8000200:	4293      	cmp	r3, r2
 8000202:	d106      	bne.n	8000212 <GPIO_PeriClkCntrl+0x3e>
 8000204:	4b3d      	ldr	r3, [pc, #244]	; (80002fc <GPIO_PeriClkCntrl+0x128>)
 8000206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000208:	4a3c      	ldr	r2, [pc, #240]	; (80002fc <GPIO_PeriClkCntrl+0x128>)
 800020a:	f043 0302 	orr.w	r3, r3, #2
 800020e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000210:	e06c      	b.n	80002ec <GPIO_PeriClkCntrl+0x118>
		else if (pGPIOx == GPIOC) GPIOC_PCLK_EN();
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	4a3b      	ldr	r2, [pc, #236]	; (8000304 <GPIO_PeriClkCntrl+0x130>)
 8000216:	4293      	cmp	r3, r2
 8000218:	d106      	bne.n	8000228 <GPIO_PeriClkCntrl+0x54>
 800021a:	4b38      	ldr	r3, [pc, #224]	; (80002fc <GPIO_PeriClkCntrl+0x128>)
 800021c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021e:	4a37      	ldr	r2, [pc, #220]	; (80002fc <GPIO_PeriClkCntrl+0x128>)
 8000220:	f043 0304 	orr.w	r3, r3, #4
 8000224:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000226:	e061      	b.n	80002ec <GPIO_PeriClkCntrl+0x118>
		else if (pGPIOx == GPIOD) GPIOD_PCLK_EN();
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	4a37      	ldr	r2, [pc, #220]	; (8000308 <GPIO_PeriClkCntrl+0x134>)
 800022c:	4293      	cmp	r3, r2
 800022e:	d106      	bne.n	800023e <GPIO_PeriClkCntrl+0x6a>
 8000230:	4b32      	ldr	r3, [pc, #200]	; (80002fc <GPIO_PeriClkCntrl+0x128>)
 8000232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000234:	4a31      	ldr	r2, [pc, #196]	; (80002fc <GPIO_PeriClkCntrl+0x128>)
 8000236:	f043 0308 	orr.w	r3, r3, #8
 800023a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800023c:	e056      	b.n	80002ec <GPIO_PeriClkCntrl+0x118>
		else if (pGPIOx == GPIOE) GPIOE_PCLK_EN();
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4a32      	ldr	r2, [pc, #200]	; (800030c <GPIO_PeriClkCntrl+0x138>)
 8000242:	4293      	cmp	r3, r2
 8000244:	d106      	bne.n	8000254 <GPIO_PeriClkCntrl+0x80>
 8000246:	4b2d      	ldr	r3, [pc, #180]	; (80002fc <GPIO_PeriClkCntrl+0x128>)
 8000248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024a:	4a2c      	ldr	r2, [pc, #176]	; (80002fc <GPIO_PeriClkCntrl+0x128>)
 800024c:	f043 0310 	orr.w	r3, r3, #16
 8000250:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000252:	e04b      	b.n	80002ec <GPIO_PeriClkCntrl+0x118>
		else if (pGPIOx == GPIOH) GPIOH_PCLK_EN();
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	4a2e      	ldr	r2, [pc, #184]	; (8000310 <GPIO_PeriClkCntrl+0x13c>)
 8000258:	4293      	cmp	r3, r2
 800025a:	d147      	bne.n	80002ec <GPIO_PeriClkCntrl+0x118>
 800025c:	4b27      	ldr	r3, [pc, #156]	; (80002fc <GPIO_PeriClkCntrl+0x128>)
 800025e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000260:	4a26      	ldr	r2, [pc, #152]	; (80002fc <GPIO_PeriClkCntrl+0x128>)
 8000262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000266:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000268:	e040      	b.n	80002ec <GPIO_PeriClkCntrl+0x118>
		if (pGPIOx == GPIOA) GPIOA_PCLK_DI();
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4a22      	ldr	r2, [pc, #136]	; (80002f8 <GPIO_PeriClkCntrl+0x124>)
 800026e:	4293      	cmp	r3, r2
 8000270:	d106      	bne.n	8000280 <GPIO_PeriClkCntrl+0xac>
 8000272:	4b22      	ldr	r3, [pc, #136]	; (80002fc <GPIO_PeriClkCntrl+0x128>)
 8000274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000276:	4a21      	ldr	r2, [pc, #132]	; (80002fc <GPIO_PeriClkCntrl+0x128>)
 8000278:	f023 0301 	bic.w	r3, r3, #1
 800027c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800027e:	e035      	b.n	80002ec <GPIO_PeriClkCntrl+0x118>
		else if (pGPIOx == GPIOB) GPIOB_PCLK_DI();
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	4a1f      	ldr	r2, [pc, #124]	; (8000300 <GPIO_PeriClkCntrl+0x12c>)
 8000284:	4293      	cmp	r3, r2
 8000286:	d106      	bne.n	8000296 <GPIO_PeriClkCntrl+0xc2>
 8000288:	4b1c      	ldr	r3, [pc, #112]	; (80002fc <GPIO_PeriClkCntrl+0x128>)
 800028a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028c:	4a1b      	ldr	r2, [pc, #108]	; (80002fc <GPIO_PeriClkCntrl+0x128>)
 800028e:	f023 0302 	bic.w	r3, r3, #2
 8000292:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000294:	e02a      	b.n	80002ec <GPIO_PeriClkCntrl+0x118>
		else if (pGPIOx == GPIOC) GPIOC_PCLK_DI();
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	4a1a      	ldr	r2, [pc, #104]	; (8000304 <GPIO_PeriClkCntrl+0x130>)
 800029a:	4293      	cmp	r3, r2
 800029c:	d106      	bne.n	80002ac <GPIO_PeriClkCntrl+0xd8>
 800029e:	4b17      	ldr	r3, [pc, #92]	; (80002fc <GPIO_PeriClkCntrl+0x128>)
 80002a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a2:	4a16      	ldr	r2, [pc, #88]	; (80002fc <GPIO_PeriClkCntrl+0x128>)
 80002a4:	f023 0304 	bic.w	r3, r3, #4
 80002a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002aa:	e01f      	b.n	80002ec <GPIO_PeriClkCntrl+0x118>
		else if (pGPIOx == GPIOD) GPIOD_PCLK_DI();
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	4a16      	ldr	r2, [pc, #88]	; (8000308 <GPIO_PeriClkCntrl+0x134>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d106      	bne.n	80002c2 <GPIO_PeriClkCntrl+0xee>
 80002b4:	4b11      	ldr	r3, [pc, #68]	; (80002fc <GPIO_PeriClkCntrl+0x128>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b8:	4a10      	ldr	r2, [pc, #64]	; (80002fc <GPIO_PeriClkCntrl+0x128>)
 80002ba:	f023 0308 	bic.w	r3, r3, #8
 80002be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002c0:	e014      	b.n	80002ec <GPIO_PeriClkCntrl+0x118>
		else if (pGPIOx == GPIOE) GPIOE_PCLK_DI();
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a11      	ldr	r2, [pc, #68]	; (800030c <GPIO_PeriClkCntrl+0x138>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d106      	bne.n	80002d8 <GPIO_PeriClkCntrl+0x104>
 80002ca:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <GPIO_PeriClkCntrl+0x128>)
 80002cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ce:	4a0b      	ldr	r2, [pc, #44]	; (80002fc <GPIO_PeriClkCntrl+0x128>)
 80002d0:	f023 0310 	bic.w	r3, r3, #16
 80002d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d6:	e009      	b.n	80002ec <GPIO_PeriClkCntrl+0x118>
		else if (pGPIOx == GPIOH) GPIOH_PCLK_DI();
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	4a0d      	ldr	r2, [pc, #52]	; (8000310 <GPIO_PeriClkCntrl+0x13c>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	d105      	bne.n	80002ec <GPIO_PeriClkCntrl+0x118>
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <GPIO_PeriClkCntrl+0x128>)
 80002e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e4:	4a05      	ldr	r2, [pc, #20]	; (80002fc <GPIO_PeriClkCntrl+0x128>)
 80002e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80002ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40020000 	.word	0x40020000
 80002fc:	40023800 	.word	0x40023800
 8000300:	40020400 	.word	0x40020400
 8000304:	40020800 	.word	0x40020800
 8000308:	40020c00 	.word	0x40020c00
 800030c:	40021000 	.word	0x40021000
 8000310:	40021c00 	.word	0x40021c00

08000314 <GPIO_Init>:
 * @return             - none
 *
 * @note               - none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
	uint32_t temp =0;
 800031c:	2300      	movs	r3, #0
 800031e:	60fb      	str	r3, [r7, #12]

	//Peripheral clock enable
	GPIO_PeriClkCntrl(pGPIOHandle->pGPIOx, ENABLE);
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2101      	movs	r1, #1
 8000326:	4618      	mov	r0, r3
 8000328:	f7ff ff54 	bl	80001d4 <GPIO_PeriClkCntrl>

	// 1. configuring pin mode
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	795b      	ldrb	r3, [r3, #5]
 8000330:	2b03      	cmp	r3, #3
 8000332:	d821      	bhi.n	8000378 <GPIO_Init+0x64>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	795b      	ldrb	r3, [r3, #5]
 8000338:	461a      	mov	r2, r3
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	791b      	ldrb	r3, [r3, #4]
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	fa02 f303 	lsl.w	r3, r2, r3
 8000344:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Resetting
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	791b      	ldrb	r3, [r3, #4]
 8000350:	4619      	mov	r1, r3
 8000352:	2303      	movs	r3, #3
 8000354:	408b      	lsls	r3, r1
 8000356:	43db      	mvns	r3, r3
 8000358:	4619      	mov	r1, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	400a      	ands	r2, r1
 8000360:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	6819      	ldr	r1, [r3, #0]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	68fa      	ldr	r2, [r7, #12]
 800036e:	430a      	orrs	r2, r1
 8000370:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000372:	2300      	movs	r3, #0
 8000374:	60fb      	str	r3, [r7, #12]
 8000376:	e0d1      	b.n	800051c <GPIO_Init+0x208>
	}
	else
	{
		//do it later
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	795b      	ldrb	r3, [r3, #5]
 800037c:	2b04      	cmp	r3, #4
 800037e:	d117      	bne.n	80003b0 <GPIO_Init+0x9c>
		{
			//1. configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000380:	4b4a      	ldr	r3, [pc, #296]	; (80004ac <GPIO_Init+0x198>)
 8000382:	68db      	ldr	r3, [r3, #12]
 8000384:	687a      	ldr	r2, [r7, #4]
 8000386:	7912      	ldrb	r2, [r2, #4]
 8000388:	4611      	mov	r1, r2
 800038a:	2201      	movs	r2, #1
 800038c:	408a      	lsls	r2, r1
 800038e:	4611      	mov	r1, r2
 8000390:	4a46      	ldr	r2, [pc, #280]	; (80004ac <GPIO_Init+0x198>)
 8000392:	430b      	orrs	r3, r1
 8000394:	60d3      	str	r3, [r2, #12]
			//clearing RTSR
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000396:	4b45      	ldr	r3, [pc, #276]	; (80004ac <GPIO_Init+0x198>)
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	687a      	ldr	r2, [r7, #4]
 800039c:	7912      	ldrb	r2, [r2, #4]
 800039e:	4611      	mov	r1, r2
 80003a0:	2201      	movs	r2, #1
 80003a2:	408a      	lsls	r2, r1
 80003a4:	43d2      	mvns	r2, r2
 80003a6:	4611      	mov	r1, r2
 80003a8:	4a40      	ldr	r2, [pc, #256]	; (80004ac <GPIO_Init+0x198>)
 80003aa:	400b      	ands	r3, r1
 80003ac:	6093      	str	r3, [r2, #8]
 80003ae:	e035      	b.n	800041c <GPIO_Init+0x108>

		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	795b      	ldrb	r3, [r3, #5]
 80003b4:	2b05      	cmp	r3, #5
 80003b6:	d117      	bne.n	80003e8 <GPIO_Init+0xd4>
		{
			//1. configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003b8:	4b3c      	ldr	r3, [pc, #240]	; (80004ac <GPIO_Init+0x198>)
 80003ba:	689b      	ldr	r3, [r3, #8]
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	7912      	ldrb	r2, [r2, #4]
 80003c0:	4611      	mov	r1, r2
 80003c2:	2201      	movs	r2, #1
 80003c4:	408a      	lsls	r2, r1
 80003c6:	4611      	mov	r1, r2
 80003c8:	4a38      	ldr	r2, [pc, #224]	; (80004ac <GPIO_Init+0x198>)
 80003ca:	430b      	orrs	r3, r1
 80003cc:	6093      	str	r3, [r2, #8]
			//clearing RTSR
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003ce:	4b37      	ldr	r3, [pc, #220]	; (80004ac <GPIO_Init+0x198>)
 80003d0:	68db      	ldr	r3, [r3, #12]
 80003d2:	687a      	ldr	r2, [r7, #4]
 80003d4:	7912      	ldrb	r2, [r2, #4]
 80003d6:	4611      	mov	r1, r2
 80003d8:	2201      	movs	r2, #1
 80003da:	408a      	lsls	r2, r1
 80003dc:	43d2      	mvns	r2, r2
 80003de:	4611      	mov	r1, r2
 80003e0:	4a32      	ldr	r2, [pc, #200]	; (80004ac <GPIO_Init+0x198>)
 80003e2:	400b      	ands	r3, r1
 80003e4:	60d3      	str	r3, [r2, #12]
 80003e6:	e019      	b.n	800041c <GPIO_Init+0x108>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	795b      	ldrb	r3, [r3, #5]
 80003ec:	2b06      	cmp	r3, #6
 80003ee:	d115      	bne.n	800041c <GPIO_Init+0x108>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003f0:	4b2e      	ldr	r3, [pc, #184]	; (80004ac <GPIO_Init+0x198>)
 80003f2:	689b      	ldr	r3, [r3, #8]
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	7912      	ldrb	r2, [r2, #4]
 80003f8:	4611      	mov	r1, r2
 80003fa:	2201      	movs	r2, #1
 80003fc:	408a      	lsls	r2, r1
 80003fe:	4611      	mov	r1, r2
 8000400:	4a2a      	ldr	r2, [pc, #168]	; (80004ac <GPIO_Init+0x198>)
 8000402:	430b      	orrs	r3, r1
 8000404:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000406:	4b29      	ldr	r3, [pc, #164]	; (80004ac <GPIO_Init+0x198>)
 8000408:	68db      	ldr	r3, [r3, #12]
 800040a:	687a      	ldr	r2, [r7, #4]
 800040c:	7912      	ldrb	r2, [r2, #4]
 800040e:	4611      	mov	r1, r2
 8000410:	2201      	movs	r2, #1
 8000412:	408a      	lsls	r2, r1
 8000414:	4611      	mov	r1, r2
 8000416:	4a25      	ldr	r2, [pc, #148]	; (80004ac <GPIO_Init+0x198>)
 8000418:	430b      	orrs	r3, r1
 800041a:	60d3      	str	r3, [r2, #12]
		}

		//2. configure GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	791b      	ldrb	r3, [r3, #4]
 8000420:	089b      	lsrs	r3, r3, #2
 8000422:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	791b      	ldrb	r3, [r3, #4]
 8000428:	f003 0303 	and.w	r3, r3, #3
 800042c:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a1f      	ldr	r2, [pc, #124]	; (80004b0 <GPIO_Init+0x19c>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d04d      	beq.n	80004d4 <GPIO_Init+0x1c0>
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a1d      	ldr	r2, [pc, #116]	; (80004b4 <GPIO_Init+0x1a0>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d032      	beq.n	80004a8 <GPIO_Init+0x194>
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a1c      	ldr	r2, [pc, #112]	; (80004b8 <GPIO_Init+0x1a4>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d02b      	beq.n	80004a4 <GPIO_Init+0x190>
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a1a      	ldr	r2, [pc, #104]	; (80004bc <GPIO_Init+0x1a8>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d024      	beq.n	80004a0 <GPIO_Init+0x18c>
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a19      	ldr	r2, [pc, #100]	; (80004c0 <GPIO_Init+0x1ac>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d01d      	beq.n	800049c <GPIO_Init+0x188>
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a17      	ldr	r2, [pc, #92]	; (80004c4 <GPIO_Init+0x1b0>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d016      	beq.n	8000498 <GPIO_Init+0x184>
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a16      	ldr	r2, [pc, #88]	; (80004c8 <GPIO_Init+0x1b4>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d00f      	beq.n	8000494 <GPIO_Init+0x180>
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a14      	ldr	r2, [pc, #80]	; (80004cc <GPIO_Init+0x1b8>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d008      	beq.n	8000490 <GPIO_Init+0x17c>
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a13      	ldr	r2, [pc, #76]	; (80004d0 <GPIO_Init+0x1bc>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d101      	bne.n	800048c <GPIO_Init+0x178>
 8000488:	2308      	movs	r3, #8
 800048a:	e024      	b.n	80004d6 <GPIO_Init+0x1c2>
 800048c:	2300      	movs	r3, #0
 800048e:	e022      	b.n	80004d6 <GPIO_Init+0x1c2>
 8000490:	2307      	movs	r3, #7
 8000492:	e020      	b.n	80004d6 <GPIO_Init+0x1c2>
 8000494:	2306      	movs	r3, #6
 8000496:	e01e      	b.n	80004d6 <GPIO_Init+0x1c2>
 8000498:	2305      	movs	r3, #5
 800049a:	e01c      	b.n	80004d6 <GPIO_Init+0x1c2>
 800049c:	2304      	movs	r3, #4
 800049e:	e01a      	b.n	80004d6 <GPIO_Init+0x1c2>
 80004a0:	2303      	movs	r3, #3
 80004a2:	e018      	b.n	80004d6 <GPIO_Init+0x1c2>
 80004a4:	2302      	movs	r3, #2
 80004a6:	e016      	b.n	80004d6 <GPIO_Init+0x1c2>
 80004a8:	2301      	movs	r3, #1
 80004aa:	e014      	b.n	80004d6 <GPIO_Init+0x1c2>
 80004ac:	40013c00 	.word	0x40013c00
 80004b0:	40020000 	.word	0x40020000
 80004b4:	40020400 	.word	0x40020400
 80004b8:	40020800 	.word	0x40020800
 80004bc:	40020c00 	.word	0x40020c00
 80004c0:	40021000 	.word	0x40021000
 80004c4:	40021400 	.word	0x40021400
 80004c8:	40021800 	.word	0x40021800
 80004cc:	40021c00 	.word	0x40021c00
 80004d0:	40022000 	.word	0x40022000
 80004d4:	2300      	movs	r3, #0
 80004d6:	727b      	strb	r3, [r7, #9]
        SYSCFG_PCLK_EN();
 80004d8:	4b65      	ldr	r3, [pc, #404]	; (8000670 <GPIO_Init+0x35c>)
 80004da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004dc:	4a64      	ldr	r2, [pc, #400]	; (8000670 <GPIO_Init+0x35c>)
 80004de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004e2:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= (portcode << (4*temp2));
 80004e4:	4a63      	ldr	r2, [pc, #396]	; (8000674 <GPIO_Init+0x360>)
 80004e6:	7afb      	ldrb	r3, [r7, #11]
 80004e8:	3302      	adds	r3, #2
 80004ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004ee:	7a79      	ldrb	r1, [r7, #9]
 80004f0:	7abb      	ldrb	r3, [r7, #10]
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	fa01 f303 	lsl.w	r3, r1, r3
 80004f8:	4618      	mov	r0, r3
 80004fa:	495e      	ldr	r1, [pc, #376]	; (8000674 <GPIO_Init+0x360>)
 80004fc:	7afb      	ldrb	r3, [r7, #11]
 80004fe:	4302      	orrs	r2, r0
 8000500:	3302      	adds	r3, #2
 8000502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3. Enable exti interrupt delivery using exti_imr
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000506:	4b5c      	ldr	r3, [pc, #368]	; (8000678 <GPIO_Init+0x364>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	687a      	ldr	r2, [r7, #4]
 800050c:	7912      	ldrb	r2, [r2, #4]
 800050e:	4611      	mov	r1, r2
 8000510:	2201      	movs	r2, #1
 8000512:	408a      	lsls	r2, r1
 8000514:	4611      	mov	r1, r2
 8000516:	4a58      	ldr	r2, [pc, #352]	; (8000678 <GPIO_Init+0x364>)
 8000518:	430b      	orrs	r3, r1
 800051a:	6013      	str	r3, [r2, #0]
	}

	// 2. configuring pin speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed) << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	799b      	ldrb	r3, [r3, #6]
 8000520:	461a      	mov	r2, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	791b      	ldrb	r3, [r3, #4]
 8000526:	005b      	lsls	r3, r3, #1
 8000528:	fa02 f303 	lsl.w	r3, r2, r3
 800052c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Resetting
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	689a      	ldr	r2, [r3, #8]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	791b      	ldrb	r3, [r3, #4]
 8000538:	4619      	mov	r1, r3
 800053a:	2303      	movs	r3, #3
 800053c:	408b      	lsls	r3, r1
 800053e:	43db      	mvns	r3, r3
 8000540:	4619      	mov	r1, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	400a      	ands	r2, r1
 8000548:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp; //Setting
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	6899      	ldr	r1, [r3, #8]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	68fa      	ldr	r2, [r7, #12]
 8000556:	430a      	orrs	r2, r1
 8000558:	609a      	str	r2, [r3, #8]
	temp = 0;
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]

	//3. configure pull up and pull down
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl) << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	79db      	ldrb	r3, [r3, #7]
 8000562:	461a      	mov	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	791b      	ldrb	r3, [r3, #4]
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	fa02 f303 	lsl.w	r3, r2, r3
 800056e:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Resetting
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	68da      	ldr	r2, [r3, #12]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	791b      	ldrb	r3, [r3, #4]
 800057a:	4619      	mov	r1, r3
 800057c:	2303      	movs	r3, #3
 800057e:	408b      	lsls	r3, r1
 8000580:	43db      	mvns	r3, r3
 8000582:	4619      	mov	r1, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	400a      	ands	r2, r1
 800058a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; //Setting
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	68d9      	ldr	r1, [r3, #12]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	430a      	orrs	r2, r1
 800059a:	60da      	str	r2, [r3, #12]
	temp = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]

	//4. configure output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType) << ( pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	7a1b      	ldrb	r3, [r3, #8]
 80005a4:	461a      	mov	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	791b      	ldrb	r3, [r3, #4]
 80005aa:	fa02 f303 	lsl.w	r3, r2, r3
 80005ae:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Resetting
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	685a      	ldr	r2, [r3, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	791b      	ldrb	r3, [r3, #4]
 80005ba:	4619      	mov	r1, r3
 80005bc:	2301      	movs	r3, #1
 80005be:	408b      	lsls	r3, r1
 80005c0:	43db      	mvns	r3, r3
 80005c2:	4619      	mov	r1, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	400a      	ands	r2, r1
 80005ca:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp; //Setting
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	6859      	ldr	r1, [r3, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	430a      	orrs	r2, r1
 80005da:	605a      	str	r2, [r3, #4]
	temp = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	795b      	ldrb	r3, [r3, #5]
 80005e4:	2b02      	cmp	r3, #2
 80005e6:	d13f      	bne.n	8000668 <GPIO_Init+0x354>
	{
		// 5. configure alt function register
		uint8_t temp1;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	791b      	ldrb	r3, [r3, #4]
 80005ec:	f003 0307 	and.w	r3, r3, #7
 80005f0:	723b      	strb	r3, [r7, #8]

		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode) << (4 * temp1);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	7a5b      	ldrb	r3, [r3, #9]
 80005f6:	461a      	mov	r2, r3
 80005f8:	7a3b      	ldrb	r3, [r7, #8]
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000600:	60fb      	str	r3, [r7, #12]

		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	791b      	ldrb	r3, [r3, #4]
 8000606:	2b07      	cmp	r3, #7
 8000608:	d816      	bhi.n	8000638 <GPIO_Init+0x324>
		{
			pGPIOHandle->pGPIOx->AFRL &= ~(0xf << (4*temp1)); //Resetting
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	6a1a      	ldr	r2, [r3, #32]
 8000610:	7a3b      	ldrb	r3, [r7, #8]
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	210f      	movs	r1, #15
 8000616:	fa01 f303 	lsl.w	r3, r1, r3
 800061a:	43db      	mvns	r3, r3
 800061c:	4619      	mov	r1, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	400a      	ands	r2, r1
 8000624:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |= temp; //Setting
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	6a19      	ldr	r1, [r3, #32]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	68fa      	ldr	r2, [r7, #12]
 8000632:	430a      	orrs	r2, r1
 8000634:	621a      	str	r2, [r3, #32]
 8000636:	e015      	b.n	8000664 <GPIO_Init+0x350>
		}
		else
		{
			pGPIOHandle->pGPIOx->AFRH &= ~(0xf << (4*temp1)); //Resetting
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800063e:	7a3b      	ldrb	r3, [r7, #8]
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	210f      	movs	r1, #15
 8000644:	fa01 f303 	lsl.w	r3, r1, r3
 8000648:	43db      	mvns	r3, r3
 800064a:	4619      	mov	r1, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	400a      	ands	r2, r1
 8000652:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandle->pGPIOx->AFRH |= temp; //Setting
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	430a      	orrs	r2, r1
 8000662:	625a      	str	r2, [r3, #36]	; 0x24
		}

		temp = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]

	}

}
 8000668:	bf00      	nop
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40023800 	.word	0x40023800
 8000674:	40013800 	.word	0x40013800
 8000678:	40013c00 	.word	0x40013c00

0800067c <SPI_PeriClkCntrl>:
 * @return             - none
 *
 * @note               - none
 */
void SPI_PeriClkCntrl(SPI_RegDef_t *pSPIx , uint8_t EnorDi)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	460b      	mov	r3, r1
 8000686:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000688:	78fb      	ldrb	r3, [r7, #3]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d120      	bne.n	80006d0 <SPI_PeriClkCntrl+0x54>
	{
		if (pSPIx == SPI1)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a22      	ldr	r2, [pc, #136]	; (800071c <SPI_PeriClkCntrl+0xa0>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d106      	bne.n	80006a4 <SPI_PeriClkCntrl+0x28>
		{
			SPI1_PCLK_EN();
 8000696:	4b22      	ldr	r3, [pc, #136]	; (8000720 <SPI_PeriClkCntrl+0xa4>)
 8000698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800069a:	4a21      	ldr	r2, [pc, #132]	; (8000720 <SPI_PeriClkCntrl+0xa4>)
 800069c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006a0:	6453      	str	r3, [r2, #68]	; 0x44
		else if (pSPIx == SPI3)
		{
			SPI3_PCLK_DI();
		}
	}
}
 80006a2:	e035      	b.n	8000710 <SPI_PeriClkCntrl+0x94>
		else if (pSPIx == SPI2)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4a1f      	ldr	r2, [pc, #124]	; (8000724 <SPI_PeriClkCntrl+0xa8>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d106      	bne.n	80006ba <SPI_PeriClkCntrl+0x3e>
			SPI2_PCLK_EN();
 80006ac:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <SPI_PeriClkCntrl+0xa4>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	4a1b      	ldr	r2, [pc, #108]	; (8000720 <SPI_PeriClkCntrl+0xa4>)
 80006b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006b8:	e02a      	b.n	8000710 <SPI_PeriClkCntrl+0x94>
		else if (pSPIx == SPI3)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4a1a      	ldr	r2, [pc, #104]	; (8000728 <SPI_PeriClkCntrl+0xac>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d126      	bne.n	8000710 <SPI_PeriClkCntrl+0x94>
			SPI3_PCLK_EN();
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <SPI_PeriClkCntrl+0xa4>)
 80006c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c6:	4a16      	ldr	r2, [pc, #88]	; (8000720 <SPI_PeriClkCntrl+0xa4>)
 80006c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006cc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006ce:	e01f      	b.n	8000710 <SPI_PeriClkCntrl+0x94>
		if (pSPIx == SPI1)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4a12      	ldr	r2, [pc, #72]	; (800071c <SPI_PeriClkCntrl+0xa0>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d106      	bne.n	80006e6 <SPI_PeriClkCntrl+0x6a>
			SPI1_PCLK_DI();
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <SPI_PeriClkCntrl+0xa4>)
 80006da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006dc:	4a10      	ldr	r2, [pc, #64]	; (8000720 <SPI_PeriClkCntrl+0xa4>)
 80006de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80006e2:	6453      	str	r3, [r2, #68]	; 0x44
}
 80006e4:	e014      	b.n	8000710 <SPI_PeriClkCntrl+0x94>
		else if (pSPIx == SPI2)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4a0e      	ldr	r2, [pc, #56]	; (8000724 <SPI_PeriClkCntrl+0xa8>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d106      	bne.n	80006fc <SPI_PeriClkCntrl+0x80>
			SPI2_PCLK_DI();
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <SPI_PeriClkCntrl+0xa4>)
 80006f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f2:	4a0b      	ldr	r2, [pc, #44]	; (8000720 <SPI_PeriClkCntrl+0xa4>)
 80006f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80006f8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006fa:	e009      	b.n	8000710 <SPI_PeriClkCntrl+0x94>
		else if (pSPIx == SPI3)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <SPI_PeriClkCntrl+0xac>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d105      	bne.n	8000710 <SPI_PeriClkCntrl+0x94>
			SPI3_PCLK_DI();
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <SPI_PeriClkCntrl+0xa4>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	4a05      	ldr	r2, [pc, #20]	; (8000720 <SPI_PeriClkCntrl+0xa4>)
 800070a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800070e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40013000 	.word	0x40013000
 8000720:	40023800 	.word	0x40023800
 8000724:	40003800 	.word	0x40003800
 8000728:	40003c00 	.word	0x40003c00

0800072c <SPI_Init>:
 * @return             - none
 *
 * @note               - none
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]

	//Peripheral clock enable
	SPI_PeriClkCntrl(pSPIHandle->pSPIx, ENABLE);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2101      	movs	r1, #1
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff9e 	bl	800067c <SPI_PeriClkCntrl>

	// 1. SPI device mode
	pSPIHandle->pSPIx->CR1 &= ~( pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	791b      	ldrb	r3, [r3, #4]
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	43db      	mvns	r3, r3
 800074e:	4619      	mov	r1, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	400a      	ands	r2, r1
 8000756:	601a      	str	r2, [r3, #0]
	pSPIHandle->pSPIx->CR1 |= ( pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	791b      	ldrb	r3, [r3, #4]
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	4619      	mov	r1, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	430a      	orrs	r2, r1
 800076c:	601a      	str	r2, [r3, #0]

	//2. SPI bus configuration
	if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	795b      	ldrb	r3, [r3, #5]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d108      	bne.n	8000788 <SPI_Init+0x5c>
	{
		pSPIHandle->pSPIx->CR1 &= ~( 1 << SPI_CR1_BIDI);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	e020      	b.n	80007ca <SPI_Init+0x9e>
	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	795b      	ldrb	r3, [r3, #5]
 800078c:	2b02      	cmp	r3, #2
 800078e:	d108      	bne.n	80007a2 <SPI_Init+0x76>
	{
		pSPIHandle->pSPIx->CR1 |= ( 1 << SPI_CR1_BIDI);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	e013      	b.n	80007ca <SPI_Init+0x9e>
	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	795b      	ldrb	r3, [r3, #5]
 80007a6:	2b03      	cmp	r3, #3
 80007a8:	d10f      	bne.n	80007ca <SPI_Init+0x9e>
	{
		pSPIHandle->pSPIx->CR1 &= ~( 1 << SPI_CR1_BIDI);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80007b8:	601a      	str	r2, [r3, #0]
		pSPIHandle->pSPIx->CR1 |= ( 1 << SPI_CR1_RX_ONLY);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80007c8:	601a      	str	r2, [r3, #0]
	}

	//3. SPI serial clock speed
	pSPIHandle->pSPIx->CR1 &= ~( pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	799b      	ldrb	r3, [r3, #6]
 80007d4:	00db      	lsls	r3, r3, #3
 80007d6:	43db      	mvns	r3, r3
 80007d8:	4619      	mov	r1, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	400a      	ands	r2, r1
 80007e0:	601a      	str	r2, [r3, #0]
	pSPIHandle->pSPIx->CR1 |= ( pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	799b      	ldrb	r3, [r3, #6]
 80007ec:	00db      	lsls	r3, r3, #3
 80007ee:	4619      	mov	r1, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	430a      	orrs	r2, r1
 80007f6:	601a      	str	r2, [r3, #0]

	//4. SPI data frame format
	pSPIHandle->pSPIx->CR1 &= ~( pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	79db      	ldrb	r3, [r3, #7]
 8000802:	02db      	lsls	r3, r3, #11
 8000804:	43db      	mvns	r3, r3
 8000806:	4619      	mov	r1, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	400a      	ands	r2, r1
 800080e:	601a      	str	r2, [r3, #0]
	pSPIHandle->pSPIx->CR1 |= ( pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	79db      	ldrb	r3, [r3, #7]
 800081a:	02db      	lsls	r3, r3, #11
 800081c:	4619      	mov	r1, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	430a      	orrs	r2, r1
 8000824:	601a      	str	r2, [r3, #0]

	//5. SPI clock phase
	pSPIHandle->pSPIx->CR1 &= ~( pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	7a1b      	ldrb	r3, [r3, #8]
 8000830:	43db      	mvns	r3, r3
 8000832:	4619      	mov	r1, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	400a      	ands	r2, r1
 800083a:	601a      	str	r2, [r3, #0]
	pSPIHandle->pSPIx->CR1 |= ( pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	7a1b      	ldrb	r3, [r3, #8]
 8000846:	4619      	mov	r1, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	430a      	orrs	r2, r1
 800084e:	601a      	str	r2, [r3, #0]

	//6. SPI clock polarity
	pSPIHandle->pSPIx->CR1 &= ~( pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	7a5b      	ldrb	r3, [r3, #9]
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	43db      	mvns	r3, r3
 800085e:	4619      	mov	r1, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	400a      	ands	r2, r1
 8000866:	601a      	str	r2, [r3, #0]
	pSPIHandle->pSPIx->CR1 |= ( pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	7a5b      	ldrb	r3, [r3, #9]
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	4619      	mov	r1, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	430a      	orrs	r2, r1
 800087c:	601a      	str	r2, [r3, #0]

	//6. SPI software slave select
	pSPIHandle->pSPIx->CR1 &= ~( pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	7a9b      	ldrb	r3, [r3, #10]
 8000888:	025b      	lsls	r3, r3, #9
 800088a:	43db      	mvns	r3, r3
 800088c:	4619      	mov	r1, r3
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	400a      	ands	r2, r1
 8000894:	601a      	str	r2, [r3, #0]
	pSPIHandle->pSPIx->CR1 |= ( pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	7a9b      	ldrb	r3, [r3, #10]
 80008a0:	025b      	lsls	r3, r3, #9
 80008a2:	4619      	mov	r1, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	430a      	orrs	r2, r1
 80008aa:	601a      	str	r2, [r3, #0]

}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <SPI_GetFlagStatus>:
		SPI3_REG_RESET();
	}
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx , uint32_t FlagName)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
	if (pSPIx->SR & FlagName)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	689a      	ldr	r2, [r3, #8]
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	4013      	ands	r3, r2
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 80008ca:	2301      	movs	r3, #1
 80008cc:	e000      	b.n	80008d0 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80008ce:	2300      	movs	r3, #0
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr

080008da <SPI_SendData>:
 * @return             - none
 *
 * @note               - This is blocking call
 */
void SPI_SendData(SPI_RegDef_t *pSPIx , uint8_t *pTxBuffer , uint32_t Len)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b084      	sub	sp, #16
 80008de:	af00      	add	r7, sp, #0
 80008e0:	60f8      	str	r0, [r7, #12]
 80008e2:	60b9      	str	r1, [r7, #8]
 80008e4:	607a      	str	r2, [r7, #4]
	while (Len > 0)
 80008e6:	e027      	b.n	8000938 <SPI_SendData+0x5e>
	{
		//1. wait until TXE buffer gets empty
		while(SPI_GetFlagStatus(pSPIx , SPI_TXE_FLAG) == FLAG_RESET);
 80008e8:	bf00      	nop
 80008ea:	2102      	movs	r1, #2
 80008ec:	68f8      	ldr	r0, [r7, #12]
 80008ee:	f7ff ffe1 	bl	80008b4 <SPI_GetFlagStatus>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d0f8      	beq.n	80008ea <SPI_SendData+0x10>

		//2.Check DFF bit in CR1
		if (pSPIx->CR1 & (1 << SPI_CR1_DFF))
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000900:	2b00      	cmp	r3, #0
 8000902:	d00e      	beq.n	8000922 <SPI_SendData+0x48>
		{
			//16 bit
			pSPIx->DR = *(uint16_t *)(pTxBuffer);
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	461a      	mov	r2, r3
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	60da      	str	r2, [r3, #12]
			Len--;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	3b01      	subs	r3, #1
 8000912:	607b      	str	r3, [r7, #4]
			Len--;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3b01      	subs	r3, #1
 8000918:	607b      	str	r3, [r7, #4]
			(uint16_t *)(pTxBuffer)++;
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	3301      	adds	r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	e00a      	b.n	8000938 <SPI_SendData+0x5e>
		}
		else
		{
			//8 bit
			pSPIx->DR = *(pTxBuffer);
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	461a      	mov	r2, r3
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	60da      	str	r2, [r3, #12]
			Len--;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3b01      	subs	r3, #1
 8000930:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	3301      	adds	r3, #1
 8000936:	60bb      	str	r3, [r7, #8]
	while (Len > 0)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d1d4      	bne.n	80008e8 <SPI_SendData+0xe>
		}
	}

}
 800093e:	bf00      	nop
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <SPI_PeripheralControl>:
 * @return             - none
 *
 * @note               - none
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx , uint8_t EnorDi)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	460b      	mov	r3, r1
 8000952:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000954:	78fb      	ldrb	r3, [r7, #3]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d106      	bne.n	8000968 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000966:	e005      	b.n	8000974 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	601a      	str	r2, [r3, #0]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr

0800097e <SPI_SSIConfig>:
 * @return             - none
 *
 * @note               - none
 */
void SPI_SSIConfig(SPI_RegDef_t *pSPIx , uint8_t EnorDi)
{
 800097e:	b480      	push	{r7}
 8000980:	b083      	sub	sp, #12
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
 8000986:	460b      	mov	r3, r1
 8000988:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 800098a:	78fb      	ldrb	r3, [r7, #3]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d106      	bne.n	800099e <SPI_SSIConfig+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SSI);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}
 800099c:	e005      	b.n	80009aa <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	601a      	str	r2, [r3, #0]
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <SPI1_GPIOInits>:
 * PA6   SPI1_MISO
 * PA7   SPI1_MOSI
 */

void SPI1_GPIOInits(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	memset(&SPIPins , 0 ,sizeof(SPIPins));
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	220c      	movs	r2, #12
 80009be:	2100      	movs	r1, #0
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 f8bf 	bl	8000b44 <memset>

	SPIPins.pGPIOx = GPIOA;
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <SPI1_GPIOInits+0x64>)
 80009c8:	607b      	str	r3, [r7, #4]

	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80009ca:	2302      	movs	r3, #2
 80009cc:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80009ce:	2305      	movs	r3, #5
 80009d0:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERYHIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	72bb      	strb	r3, [r7, #10]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_PP;
 80009d6:	2300      	movs	r3, #0
 80009d8:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80009da:	2300      	movs	r3, #0
 80009dc:	72fb      	strb	r3, [r7, #11]

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 80009de:	2304      	movs	r3, #4
 80009e0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fc95 	bl	8000314 <GPIO_Init>

	//SCK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 80009ea:	2305      	movs	r3, #5
 80009ec:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fc8f 	bl	8000314 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 80009f6:	2306      	movs	r3, #6
 80009f8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fc89 	bl	8000314 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000a02:	2307      	movs	r3, #7
 8000a04:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fc83 	bl	8000314 <GPIO_Init>


}
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40020000 	.word	0x40020000

08000a1c <SPI1_Inits>:

void SPI1_Inits(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI1_Handle;

	memset(&SPI1_Handle , 0 ,sizeof(SPI1_Handle));
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	220c      	movs	r2, #12
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 f88b 	bl	8000b44 <memset>

	SPI1_Handle.pSPIx = SPI1;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <SPI1_Inits+0x40>)
 8000a30:	607b      	str	r3, [r7, #4]

	SPI1_Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000a32:	2301      	movs	r3, #1
 8000a34:	723b      	strb	r3, [r7, #8]
	SPI1_Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;
 8000a36:	2300      	movs	r3, #0
 8000a38:	72bb      	strb	r3, [r7, #10]
	SPI1_Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	727b      	strb	r3, [r7, #9]
	SPI1_Handle.SPIConfig.SPI_SSM = SPI_SSM_EN;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	73bb      	strb	r3, [r7, #14]
	SPI1_Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	733b      	strb	r3, [r7, #12]
	SPI1_Handle.SPIConfig.SPI_CPOL = SPI_CPOL_IDLE_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	737b      	strb	r3, [r7, #13]

	SPI_Init(&SPI1_Handle);
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fe6d 	bl	800072c <SPI_Init>
}
 8000a52:	bf00      	nop
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40013000 	.word	0x40013000

08000a60 <main>:

int main ()
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
	uint8_t user_data[] = "Hello World";
 8000a66:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <main+0x40>)
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	SPI1_GPIOInits();
 8000a70:	f7ff ffa0 	bl	80009b4 <SPI1_GPIOInits>
	SPI1_Inits();
 8000a74:	f7ff ffd2 	bl	8000a1c <SPI1_Inits>

	//This makes nss signal internally high and avoid ModeF
	SPI_SSIConfig(SPI1 , ENABLE);
 8000a78:	2101      	movs	r1, #1
 8000a7a:	480a      	ldr	r0, [pc, #40]	; (8000aa4 <main+0x44>)
 8000a7c:	f7ff ff7f 	bl	800097e <SPI_SSIConfig>

	SPI_PeripheralControl(SPI1 , ENABLE);
 8000a80:	2101      	movs	r1, #1
 8000a82:	4808      	ldr	r0, [pc, #32]	; (8000aa4 <main+0x44>)
 8000a84:	f7ff ff60 	bl	8000948 <SPI_PeripheralControl>

	SPI_SendData(SPI1, (uint8_t *)user_data, strlen((char *)user_data));
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff fb9a 	bl	80001c4 <strlen>
 8000a90:	4602      	mov	r2, r0
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	4619      	mov	r1, r3
 8000a96:	4803      	ldr	r0, [pc, #12]	; (8000aa4 <main+0x44>)
 8000a98:	f7ff ff1f 	bl	80008da <SPI_SendData>

	while(1);
 8000a9c:	e7fe      	b.n	8000a9c <main+0x3c>
 8000a9e:	bf00      	nop
 8000aa0:	08000b6c 	.word	0x08000b6c
 8000aa4:	40013000 	.word	0x40013000

08000aa8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000aa8:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aaa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000aac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab0:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ab2:	490d      	ldr	r1, [pc, #52]	; (8000ae8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	; (8000aec <LoopForever+0xe>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab8:	e002      	b.n	8000ac0 <LoopCopyDataInit>

08000aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000abe:	3304      	adds	r3, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac4:	d3f9      	bcc.n	8000aba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac8:	4c0a      	ldr	r4, [pc, #40]	; (8000af4 <LoopForever+0x16>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000acc:	e001      	b.n	8000ad2 <LoopFillZerobss>

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad0:	3204      	adds	r2, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ad6:	f000 f811 	bl	8000afc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ada:	f7ff ffc1 	bl	8000a60 <main>

08000ade <LoopForever>:

LoopForever:
  b LoopForever
 8000ade:	e7fe      	b.n	8000ade <LoopForever>
  ldr   r0, =_estack
 8000ae0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000aec:	08000b80 	.word	0x08000b80
  ldr r2, =_sbss
 8000af0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000af4:	2000001c 	.word	0x2000001c

08000af8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC_IRQHandler>
	...

08000afc <__libc_init_array>:
 8000afc:	b570      	push	{r4, r5, r6, lr}
 8000afe:	2600      	movs	r6, #0
 8000b00:	4d0c      	ldr	r5, [pc, #48]	; (8000b34 <__libc_init_array+0x38>)
 8000b02:	4c0d      	ldr	r4, [pc, #52]	; (8000b38 <__libc_init_array+0x3c>)
 8000b04:	1b64      	subs	r4, r4, r5
 8000b06:	10a4      	asrs	r4, r4, #2
 8000b08:	42a6      	cmp	r6, r4
 8000b0a:	d109      	bne.n	8000b20 <__libc_init_array+0x24>
 8000b0c:	f000 f822 	bl	8000b54 <_init>
 8000b10:	2600      	movs	r6, #0
 8000b12:	4d0a      	ldr	r5, [pc, #40]	; (8000b3c <__libc_init_array+0x40>)
 8000b14:	4c0a      	ldr	r4, [pc, #40]	; (8000b40 <__libc_init_array+0x44>)
 8000b16:	1b64      	subs	r4, r4, r5
 8000b18:	10a4      	asrs	r4, r4, #2
 8000b1a:	42a6      	cmp	r6, r4
 8000b1c:	d105      	bne.n	8000b2a <__libc_init_array+0x2e>
 8000b1e:	bd70      	pop	{r4, r5, r6, pc}
 8000b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b24:	4798      	blx	r3
 8000b26:	3601      	adds	r6, #1
 8000b28:	e7ee      	b.n	8000b08 <__libc_init_array+0xc>
 8000b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b2e:	4798      	blx	r3
 8000b30:	3601      	adds	r6, #1
 8000b32:	e7f2      	b.n	8000b1a <__libc_init_array+0x1e>
 8000b34:	08000b78 	.word	0x08000b78
 8000b38:	08000b78 	.word	0x08000b78
 8000b3c:	08000b78 	.word	0x08000b78
 8000b40:	08000b7c 	.word	0x08000b7c

08000b44 <memset>:
 8000b44:	4603      	mov	r3, r0
 8000b46:	4402      	add	r2, r0
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d100      	bne.n	8000b4e <memset+0xa>
 8000b4c:	4770      	bx	lr
 8000b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8000b52:	e7f9      	b.n	8000b48 <memset+0x4>

08000b54 <_init>:
 8000b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b56:	bf00      	nop
 8000b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b5a:	bc08      	pop	{r3}
 8000b5c:	469e      	mov	lr, r3
 8000b5e:	4770      	bx	lr

08000b60 <_fini>:
 8000b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b62:	bf00      	nop
 8000b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b66:	bc08      	pop	{r3}
 8000b68:	469e      	mov	lr, r3
 8000b6a:	4770      	bx	lr
